generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  cheff
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar Json

  restaurants Restaurant[]
  categories  Category[]

  @@map("user")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  restaurants Restaurant[]
  dishes      Dish[]

  image Json

  @@map("category")
}

model Restaurant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String? @db.ObjectId
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  menus Menu[]

  banner Json

  @@map("restaurant")
}

model Menu {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  dishes Dish[]

  @@map("menu")
}

model Dish {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images Json[]

  menuId String? @db.ObjectId
  menu   Menu?   @relation(fields: [menuId], references: [id], onDelete: Cascade)

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  @@map("dish")
}
